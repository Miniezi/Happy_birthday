const WIDTH = 10;
const HEIGHT = 10;
const INITIAL_ENEMY_HEALTH = 5;
const INITIAL_ENEMY_DAMAGE = 1;
const INITIAL_PLAYER_HEALTH = 100;
const INITIAL_PLAYER_DAMAGE = 10;
const SHIELD_DURATION = 10000; // 10 seconds
const MAX_HEALTH = INITIAL_PLAYER_HEALTH;

let playerPosition = { x: 1, y: 1 };
let playerHealth = INITIAL_PLAYER_HEALTH;
let playerDamage = INITIAL_PLAYER_DAMAGE;
let currentLevel = 1;
let hasShield = false;
let board = [];
let enemies = [];

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function generateBoard() {
    board = [];
    enemies = [];
    for (let y = 0; y < HEIGHT; y++) {
        let row = [];
        for (let x = 0; x < WIDTH; x++) {
            if (x === 0 || x === WIDTH - 1 || y === 0 || y === HEIGHT - 1) {
                row.push('|'); // —Å—Ç–µ–Ω—ã
            } else if (x === playerPosition.x && y === playerPosition.y) {
                row.push('@'); // –∏–≥—Ä–æ–∫
            } else if (Math.random() < 0.05 * currentLevel) {
                row.push('¬ß'); // –≤—Ä–∞–≥
                enemies.push({
                    x, 
                    y, 
                    health: INITIAL_ENEMY_HEALTH + currentLevel - 1, 
                    damage: INITIAL_ENEMY_DAMAGE + currentLevel - 1
                });
            } else if (Math.random() < 0.1) {
                row.push('+'); // –ø—Ä–µ–¥–º–µ—Ç, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π –∑–¥–æ—Ä–æ–≤—å–µ
            } else if (Math.random() < 0.1) {
                row.push('!'); // –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ
            } else if (Math.random() < 0.05) {
                row.push('$'); // –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ
            } else if (x === Math.floor(WIDTH / 2) && y === HEIGHT - 2) {
                row.push('>'); // –≤—ã—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            } else {
                row.push('.'); // –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
            }
        }
        board.push(row);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
function updateEnemies() {
    for (let enemy of enemies) {
        const direction = Math.random();
        const newPosition = { x: enemy.x, y: enemy.y };

        if (direction < 0.25) newPosition.y -= 1; // move up
        else if (direction < 0.5) newPosition.y += 1; // move down
        else if (direction < 0.75) newPosition.x -= 1; // move left
        else newPosition.x += 1; // move right

        if (isValidMove(newPosition)) {
            board[enemy.y][enemy.x] = '.';
            enemy.x = newPosition.x;
            enemy.y = newPosition.y;
            board[enemy.y][enemy.x] = '¬ß';
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
function isValidMove(position) {
    if (position.x <= 0 || position.x >= WIDTH - 1 ||
        position.y <= 0 || position.y >= HEIGHT - 1) {
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–æ–º –∏–ª–∏ –¥—Ä—É–≥–∏–º –≤—Ä–∞–≥–æ–º
    if (board[position.y][position.x] === '@' || board[position.y][position.x] === '¬ß') {
        return false;
    }

    return true;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function renderBoard() {
    const tempBoard = board.map(row => row.slice());
    for (let enemy of enemies) {
        if (enemy.health > 0) {
            tempBoard[enemy.y][enemy.x] = '¬ß';
        }
    }
    tempBoard[playerPosition.y][playerPosition.x] = '@';
    let display = tempBoard.map(row => row.join('')).join('\n');
    document.getElementById('gameBoard').textContent = display;
}

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
function movePlayer(direction) {
    const newPosition = { ...playerPosition };

    if (direction === 'up') newPosition.y -= 1;
    if (direction === 'down') newPosition.y += 1;
    if (direction === 'left') newPosition.x -= 1;
    if (direction === 'right') newPosition.x += 1;

    if (isValidMove(newPosition)) {
        playerPosition = newPosition;
        handleInteraction();
        updateEnemies();
        updateBoard();
        renderBoard();
        updateUI();
        enemyAttack();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
function handleInteraction() {
    let currentTile = board[playerPosition.y][playerPosition.x];

    if (currentTile === '¬ß') {
        attackEnemy(playerPosition.x, playerPosition.y);
    } else if (currentTile === '+') {
        playerHealth = Math.min(playerHealth + 20, MAX_HEALTH);
        log('–í—ã –Ω–∞—à–ª–∏ –∞–ø—Ç–µ—á–∫—É. –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ' + playerHealth);
        board[playerPosition.y][playerPosition.x] = '.';
    } else if (currentTile === '!') {
        activateTemporaryBoost();
        board[playerPosition.y][playerPosition.x] = '.';
    } else if (currentTile === '$') {
        applyPermanentBoost();
        board[playerPosition.y][playerPosition.x] = '.';
    } else if (currentTile === '>') {
        nextLevel();
    }
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É—Å–∏–ª–µ–Ω–∏—è
function activateTemporaryBoost() {
    let rand = Math.random();
    if (rand < 0.5) {
        playerDamage += 5;
        log('üí™ –í—ã –Ω–∞—à–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ! –£—Ä–æ–Ω —É–≤–µ–ª–∏—á–µ–Ω –¥–æ ' + playerDamage);
    } else if (!hasShield) {
        hasShield = true;
        log('üõ°Ô∏è –í—ã –Ω–∞—à–ª–∏ —â–∏—Ç! –ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —É—Ä–æ–Ω.');
        setTimeout(() => {
            hasShield = false;
            log('–©–∏—Ç –∏—Å—Ç–µ–∫!');
        }, SHIELD_DURATION);
    } else {
        log('–©–∏—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!');
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —É—Å–∏–ª–µ–Ω–∏—è
function applyPermanentBoost() {
    playerDamage += 5;
    log('‚öîÔ∏è –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ! –£—Ä–æ–Ω —É–≤–µ–ª–∏—á–µ–Ω –¥–æ ' + playerDamage);
}

// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
function nextLevel() {
    currentLevel += 1;
    playerHealth = INITIAL_PLAYER_HEALTH;
    playerDamage = INITIAL_PLAYER_DAMAGE;
    generateBoard();
    renderBoard();
    updateUI();
    log('–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ' + currentLevel + '!');
}

// –ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞
function attackEnemy(x, y) {
    let enemy = enemies.find(e => e.x === x && e.y === y);
    if (enemy) {
        enemy.health -= playerDamage;
        if (enemy.health <= 0) {
            log('üí• –í—Ä–∞–≥ –ø–æ–≤–µ—Ä–∂–µ–Ω!');
            enemies = enemies.filter(e => e !== enemy);
            board[y][x] = '.';
        } else {
            log('–í—ã –Ω–∞–Ω–µ—Å–ª–∏ ' + playerDamage + ' —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥—É. –ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: ' + enemy.health);
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function updateBoard() {
    board[playerPosition.y][playerPosition.x] = '.';
    board = board.map(row => row.map(cell => cell === '@' ? '.' : cell));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    document.getElementById('health').textContent = playerHealth;
    document.getElementById('max-health').textContent = MAX_HEALTH;
    document.getElementById('damage').textContent = playerDamage;
    document.getElementById('level').textContent = currentLevel;
    document.getElementById('enemy-damage').textContent = INITIAL_ENEMY_DAMAGE + currentLevel - 1;
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
function log(message) {
    const logElement = document.getElementById('log');
    logElement.textContent = message;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞
function enemyAttack() {
    for (let enemy of enemies) {
        if (enemy.x === playerPosition.x && enemy.y === playerPosition.y) {
            if (hasShield) {
                log('üõ°Ô∏è –©–∏—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —É—Ä–æ–Ω!');
            } else {
                playerHealth -= enemy.damage;
                if (playerHealth <= 0) {
                    log('üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏!');
                    alert('Game Over');
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É
                    window.location.reload();
                } else {
                    log('–í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç! –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: ' + playerHealth);
                }
            }
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ä—è–¥–æ–º —Å –≤—Ä–∞–≥–∞–º–∏
function checkProximityDamage() {
    for (let enemy of enemies) {
        if (Math.abs(playerPosition.x - enemy.x) <= 1 && Math.abs(playerPosition.y - enemy.y) <= 1) {
            if (!hasShield) {
                playerHealth -= enemy.damage;
                if (playerHealth <= 0) {
                    log('üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏!');
                    alert('Game Over');
                    window.location.reload();
                } else {
                    log('–í—Ä–∞–≥ —Ä—è–¥–æ–º! –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: ' + playerHealth);
                }
            }
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initializeGame() {
    generateBoard();
    renderBoard();
    updateUI();

    document.getElementById('moveUp').addEventListener('click', () => movePlayer('up'));
    document.getElementById('moveDown').addEventListener('click', () => movePlayer('down'));
    document.getElementById('moveLeft').addEventListener('click', () => movePlayer('left'));
    document.getElementById('moveRight').addEventListener('click', () => movePlayer('right'));

    setInterval(checkProximityDamage, 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–Ω–∞ –æ—Ç –≤—Ä–∞–≥–æ–≤ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
}

initializeGame();
